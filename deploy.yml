---
- hosts: 127.0.0.1
  connection: local
  tags:
  - deploy
  tasks:
  - name: get old war file md5
    shell: /usr/local/etc/zabbix_agentd.conf.d/md5_check.py {{WAR_HOME}}/{{JOB_NAME}}/{{JOB_NAME}}.war {{JOB_NAME}}-local
    register: md5_old
  - name: Download war package to {{WAR_HOME}}/{{JOB_NAME}}
    command: /opt/jenkins_original/ftp_download.py {{JOB_NAME}}
  - name: wait until the {{WAR_HOME}}/{{JOB_NAME}}/{{JOB_NAME}}.war is present before continuing
    wait_for: path={{WAR_HOME}}/{{JOB_NAME}}/{{JOB_NAME}}.war
  - name: get new war file md5
    shell:  /usr/local/etc/zabbix_agentd.conf.d/md5_check.py {{WAR_HOME}}/{{JOB_NAME}}/{{JOB_NAME}}.war {{JOB_NAME}}-local
    register: md5_new
  - name: check md5 is or not "======================="
    debug:
        msg: "the war file is newer !!!!!!!!!!!!!!"
    when: md5_old.stdout != md5_new.stdout 
- hosts: "{{ TARGET_HOST }}"
  tags:
  - deploy
  tasks:
  - name: Find backup file
    shell: /usr/bin/find /opt/idc/apps/tomcat-{{ JOB_NAME }}/webapps -type f -name "*.war.*" -exec ls -l {} \;
    register: file_list
  - name: Print backup file
    debug:
      msg: "{{ file_list.stdout_lines }}"
  - name: Delete backup file
    shell: /usr/bin/find /opt/idc/apps/tomcat-{{ JOB_NAME }}/webapps -type f -name "*.war.*" -exec rm -rf {} \;
  - name: Stop {{JOB_NAME}} listen
    shell: /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/shutdown.sh
  - name: Kill {{JOB_NAME}} process
    shell: ps -efww|grep -w {{JOB_NAME}}|grep -v grep|awk -F ' ' '{ print $2 }'|xargs kill -9
    ignore_errors: True
  - name: Replace {{JOB_NAME}} war file
    copy: src={{WAR_HOME}}/{{JOB_NAME}}/{{JOB_NAME}}.war
          dest=/opt/idc/apps/tomcat-{{JOB_NAME}}/webapps/{{JOB_NAME}}.war
          backup=yes
  - name: check new war file md5
    shell:  md5sum /opt/idc/apps/tomcat-{{JOB_NAME}}/webapps/{{JOB_NAME}}.war|cut -d' ' -f1 
    register: md5_newer
  - debug:
      msg : "{{md5_newer.stdout}}"
  - name: get  md5  local from redis
    shell: /usr/local/etc/zabbix_agentd.conf.d/md5_check_remote.py /opt/idc/apps/tomcat-{{JOB_NAME}}/webapps/{{JOB_NAME}}.war {{JOB_NAME}}-remote {{JOB_NAME}}-local
    register: md5_newer_old
  - debug:
      msg: "{{md5_newer_old.stdout}}"
  - name: check md5 is or not "==========================="
    debug:
    failed_when: md5_newer.stdout != md5_newer_old.stdout
  - name: Start {{JOB_NAME}} service
    shell: nohup /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/startup.sh
  - name: check {{ JOB_NAME }} process whether exist and unique
    shell: ps aux |grep {{ JOB_NAME }}|grep -v grep|wc -l
    register: process_num
    failed_when: process_num.stdout_lines == 0
  - name:  check {{ JOB_NAME }} process port whether exist
    shell: netstat -antupl|grep {{ SERVER_PORT }}|wc -l
    register: port_count
    failed_when: port_count.stdout_lines == 0

- hosts: "{{ TARGET_HOST }}"
  tags:
  - stop
  tasks:
  - name: Stop {{JOB_NAME}} listen
    shell: /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/shutdown.sh
  - name: Kill {{JOB_NAME}} process
    shell: ps -efww|grep -w {{JOB_NAME}}|grep -v grep|awk -F ' ' '{ print $2 }'|xargs kill -9
    ignore_errors: True
  - name: check {{ JOB_NAME }} process whether exist and unique
    shell: ps aux |grep {{ JOB_NAME }}|grep -v grep|wc -l
    register: process_num
    failed_when: process_num.stdout_lines == 0
  - name:  check {{ JOB_NAME }} process port whether exist
    shell: netstat -antupl|grep {{ SERVER_PORT }}|wc -l
    register: port_count
    failed_when: port_count.stdout_lines == 0
- hosts: "{{ TARGET_HOST }}"
  tags:
  - start
  tasks:
  - name: Start {{JOB_NAME}} service
    shell: nohup /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/startup.sh
  - name: check {{ JOB_NAME }} process whether exist and unique
    shell: ps aux |grep {{ JOB_NAME }}|grep -v grep|wc -l
    register: process_num
    failed_when: process_num.stdout_lines == 0
  - name:  check {{ JOB_NAME }} process port whether exist
    shell: netstat -antupl|grep {{ SERVER_PORT }}|wc -l
    register: port_count
    failed_when: port_count.stdout_lines == 0

- hosts: "{{ TARGET_HOST }}"
  tags:
  - reboot
  tasks:
  - name: Stop {{JOB_NAME}} listen
    shell: /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/shutdown.sh
  - name: Kill {{JOB_NAME}} process
    shell: ps -efww|grep -w {{JOB_NAME}}|grep -v grep|awk -F ' ' '{ print $2 }'|xargs kill -9
    ignore_errors: True
  - name: Start {{JOB_NAME}} service
    shell: nohup /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/startup.sh
  - name: check {{ JOB_NAME }} process whether exist and unique
    shell: ps aux |grep {{ JOB_NAME }}|grep -v grep|wc -l
    register: process_num
    failed_when: process_num.stdout_lines == 0
  - name:  check {{ JOB_NAME }} process port whether exist 
    shell: netstat -antupl|grep {{ SERVER_PORT }}|wc -l
    register: port_count
    failed_when: port_count.stdout_lines == 0
- hosts: "{{ TARGET_HOST }}"
  tags:
  - fallback
  tasks:
  - name: Backup file whether exist
    shell: /usr/bin/find /opt/idc/apps/tomcat-{{ JOB_NAME }}/webapps -type f -name "*.war.*" -exec ls -l {} \;
    register: result
  - name: Echo Backup file
    debug:
      msg: "{{ result.stdout }}"
  - name: Backup file whether is only
    debug:
      msg: "More than one backup file or haven't backup file,fallback terminal"
    when: result.stdout.count('war') != 1
  - name: Backup file whether is only
    debug: 
      msg: "Backup file is only one,execute fallback"
    when: result.stdout.count('war') == 1
  - name: Stop {{JOB_NAME}} listen
    shell: /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/shutdown.sh
    when: result.stdout.count('war') == 1
  - name: Kill {{JOB_NAME}} process
    shell: ps -efww|grep -w {{JOB_NAME}}|grep -v grep|awk -F ' ' '{ print $2 }'|xargs kill -9
    ignore_errors: True
    when: result.stdout.count('war') == 1
  - name: Replace {{JOB_NAME}} war file
    shell:  /usr/bin/find /opt/idc/apps/tomcat-{{ JOB_NAME }}/webapps -type f -name "*.war.*" -exec cp {} /opt/idc/apps/tomcat-{{ JOB_NAME }}/webapps/{{JOB_NAME}}.war \;
    when: result.stdout.count('war') == 1
  - name: Start {{JOB_NAME}} service
    shell: nohup /opt/idc/apps/tomcat-{{JOB_NAME}}/bin/startup.sh
    when: result.stdout.count('war') == 1
  - name: check {{ JOB_NAME }} process whether exist and unique
    shell: ps aux |grep {{ JOB_NAME }}|grep -v grep|wc -l
    register: process_num
    failed_when: process_num.stdout_lines == 0
  - name:  check {{ JOB_NAME }} process port whether exist 
    shell: netstat -antupl|grep {{ SERVER_PORT }}|wc -l
    register: port_count
    failed_when: port_count.stdout_lines == 0
